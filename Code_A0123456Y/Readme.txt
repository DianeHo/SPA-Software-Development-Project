Many companies allocate a significant portion, up to 80%, of their software budgets to maintenance tasks. Within this maintenance phase, programmers typically invest nearly half of their time unraveling the intricacies of a program. Consequently, methods and tools that streamline program comprehension offer a promising avenue for reducing development expenses.

During program maintenance endeavors, programmers frequently grapple with locating pertinent code segments relevant to the current maintenance objectives.

A Static Program Analyzer (SPA) stands as an interactive utility designed to autonomously address inquiries regarding programs. Within this project, we conceive and actualize an SPA tailored for a straightforward source language.

To address program inquiries, the SPA initially scrutinizes a source code and abstracts pertinent program design elements, which are then stored within a Database. Subsequently, the SPA furnishes users with the means to pose questions about programs. These inquiries adhere to a formal Program Query Language (PQL). The SPA processes these PQL queries by leveraging the information gleaned from the Database and presents the findings back to the user.

For a detailed breakdown of SPA's core components, please refer to the accompanying report. Users interact with the User Interface (UI) to input a source program scripted in a simplified programming dialect dubbed SIMPLE. The SPA Source Processor parses this source code in accordance with the SIMPLE grammar, extracting pertinent information, and storing it within the Database. These abstracted design elements encompass various relationships (such as Calls, Modifies, Uses, etc.) defined for program design entities (e.g., procedures, statements, variables). Additionally, users input queries composed in the PQL grammar through the SPA's user interface. These queries undergo validation and evaluation by a Query Processor (QP). To address these queries, the Query Processor taps into the program design abstractions stored in tabular form within the Database. Ultimately, the query results are presented to the user via the UI.